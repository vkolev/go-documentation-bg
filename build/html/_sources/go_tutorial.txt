Въведение в програмния език Go
##############################


Предговор
=========

Този документ е урок представящ основите на програмния език Go, предвиден за програмисти, запознати с C или C++. 
Това не е подробен наръчник за езика; до този момент най-близкия документ до това е `спецификацията на езика <http://weekly.golang.org/doc/go_spec.html>`_. 
След като прочетете този урок, можете да продължите с `Ефективен Go <http://weekly.golang.org/doc/effective_go.html>`_, който навлиза по-дълбоко в 
това как се използва езика и говори за стил и идиоми при програмирането с Go. Съществува и интерактивна интродукция в Go, наречена `Разходка в Go <http://tour.golang.org/>`_.

Презентацията тук преминава през серия от най-скромни програми, за да илюстрира основните особености на езика. Всички програми
работят (в момента на писане) и са качени в хранилището в директория `/doc/progs/ <http://weekly.golang.org/doc/progs>`_.

Здравей свят
============

Нека започнем по обичайния начин:

.. code-block:: go

    package main

    mport fmt "fmt" // Пакет имплементиращ форматиран I/O.

    func main() {
        fmt.Printf("Здравей свят!; или Καλημέρα κόσμε; или こんにちは 世界\n")
    }

Всеки файл с изходен код в Go, използвайки ``package`` изявлението, което показва към кой пакет принадлежи. Също така може да вмъква други пакети, за да 
използва техните удобства. Тази програма вмъква пакета ``fmt``, за да добие достъп до нашия стар, сега с главна буква и пакетиран приятел, ``fmt.Printf``.

Функциите се представят с ключовата дума ``func``. Функцията ``main`` в пакета ``main`` е мястото, където програмата се изпълнява (след всяко стартиране).

Низови константи могат да съдържат уникод символи, кодирани в UTF-8. (Всъщност, изходните файлове на Go по дефиниця са кодирани в UTF-8)

Конвенцията за писането на кометари е същата като при C++.

По-късно ще споменем повече относно принтирането.

Точки и запетаи
===============

Може би сте забелязали, че в нашата програма няма точки и запетаи. В Go кода, единственото място в което вероятно ще използвате точки и запетаи е при
разграничаването на клаузите във ``for`` цикъл и подобни; не са необходими след всяка заявка.

Всъщност това, което се случва е, че формалният език използва точки и запетаи, както в C или Java, но те се добавят автоматично в края на всеки ред, който
изглежда като край на заявка. Не е необходимо да ги въвеждате.

За подробности как е направено това, можете да погледнете спецификацията на езика, но за практиката всичко, което трябва да знаете е, че никога няма да потребява
да слагате точки и запетаи в края на ред. (Можете да ги поставяте ако искате да напишете няколко заявки на един ред). Като допълнителна помощ можете да
поставяте точка и запетая веднага преди затварянето на скоба.

Този подход спомага за код, който няма точки и запетаи и изглежда добре. Единствената изненада е, че е важно да поставяте отварящата къдрава скоба на конструктор
като ``if`` на същия ред, на който е ``if``; ако не направите това, съществуват ситуации, в които кода няма да се компилира или ще даде грешен резултат. Езикът
налага този стил на къдрави скови до известна степен.

Компилиране
===========

Go е компилируем език. В момента същствуват два компилатора: ``Gccgo`` е Go компилатор, който използва за основа GCC. Има и пакет от компилатори с различни (и странни)
имена за всяка архитектура: ``6g`` за 64-bit x86, 8g за 32-bit x86 и други. Тези компилатори работят значително по-бързо, но генерират по-малко ефикасен код, в
сравнение с ``gccgo``. В момента на писане (края на 2009), те имат и по-стабилна run-time система, въпреки, че gccgo наваксва.

Ето как да компилираме и изпълним нашата програма. С 6g, казваме:

.. code-block:: console

    $ 6g helloworld.go  # компилира; обекта отива в helloworld.6
    $ 6l helloworld.6   # линкер; изходът отива в 6.out
    $ ./6.out
    Здравей свят!; или Καλημέρα κόσμε; или こんにちは 世界
    $

С ``gccgo`` това изглежда малко по-традиционно:

.. code-block:: console

    $ gccgo helloworld.go
    $ ./a.out
    Здравей свят!; или Καλημέρα κόσμε; или こんにちは 世界
    $

Echo
====

Подред, това е версия на Unix инструмента ``echo(1)``:

.. code-block:: go

    package main

    import (
        "flag" // четец за опции в командния ред
        "os"
    )

    var omitNewline = flag.Bool("n", false, "не разпечатвай последния нов ред")

    const (
        Space   = " "
        Newline = "\n"
    )

    func main() {
        flag.Parse() // Сканира списъка с аргументи и задава флагове
        var s string = ""
        for i := 0; i < flag.NArg(); i++ {
            if i > 0 {
                s += Space
            }
            s += flag.Arg(i)
        }
        if !*omitNewline {
            s += Newline
        }
        os.Stdout.WriteString(s)
    }

Тази програма е малка, но прави много нови неща. В последния пример видяхме, че ``func`` представя функция. 
Ключовите думи ``var``, ``const`` и ``type`` (не е използвана още) също представляват декларации, както и import.
Забележете, че можем да групираме декларации от еднакъв тип в списъци, един елемент на ред, както ``import`` и 
``const`` клаузите тук. Но не е задължително да се прави; бихме могли да кажем

.. code-block:: go

    const Space = " "
    const Newline = "\n"


