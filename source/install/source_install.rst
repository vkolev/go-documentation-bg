Инсталиране от изходния код
###########################

Въведение
=========

Go е проект с отворен код, предлаган под `лиценз в стил BSD <http://weekly.golang.org/LICENSE>`_. Този документ
обяснява как да извлечете изходните файлове, да ги построите на вашата машина и да ги стартирате.

Има два официални компилаторни набора за Go. Този документ се фокусира върху ``gc`` Go компилатора и инструменти
(``6g``, ``8g`` и т.н.). За информация как да използвате ``gccgo``, по-традиционен компилатор използващ основата на
GCC, вижте :doc:`source_install`.

Go компилаторите поддържат тре набора инструкции. Има важни различия в качеството на компилаторите за различните
архитектури.

``amd64 (познат като x86-64): 6g, 6l, 6c, 6a``
    Най-зрялата имплементация. Компилторът има ефективен оптимизатор и генерира добър код (макар gccgo, понякога
    да се представя значително по-добре).

``386 (познат като x86-32): 8g, 8l, 8c, 8a``
    Сравним с ``amd64`` порта.

``arm (познат като ARM): 5g, 5l, 5c, 5a``
    Поддържа само Linux (изпълними) двоични файлове. По-малко тестван от другите компилатори.

Освен неща като код от ниско ниво за интерфейс към операционната система, поддържката на времето за изпълнение е
еднакво във всички портове и включва mark-and-sweep garbage collector, ефикасно изрязване на масиви и низове и 
поддръжка за ефикасни go-рутини, като задачи, които се разширяват и смаляват при необходимост.

Компилаторите могат да бъдат насочени към FreeBSD, Linux, NetBSD, OpenBSD, OS X (Darwin) и Windows операционни системи.
Пълни набор от поддържани комбинации е описан в дискусията променливи в средата по-долу.

Инсталиране на C инструменти при необходимост
=============================================

Наборът инструменти за Go е написан на C. За да го построите трябва да имате инсталиран C компилатор.

На OS X, C компилаторът е инсталиран като част от `Xcode <http://developer.apple.com/Xcode/>`_.

Под Ubuntu/Debian, използвайте ``sudo apt-get install gcc libc6-dev``. Ако искате да построявате 32-битови изпълними
файлове на 64-битова ситема трябва да инсталирате ``libc6-dev-i386``.

.. warning:: Информация за компилаторите под Windows липсва

Инсталиране на Mercurial при необходимост
=========================================

За да изпълните следващата стъпка трябва да имате инсталиран Mercurial (Проверете дали разполагате с командата hg).
Това е достатаъчно, за да инсталирате Mercurial на повечето системи:

.. code-block:: console

    sudo easy_install mercurial==2.0

Ако използвате Ubuntu/Debian, пакетите в хранилищата на вашата дистрибуция най-вероятно са стари и счупени. Може 
да опитате първо това:

.. code-block:: console

    apt-get install python-setuptools python-dev build-essential

Ако това се провали, опитайте да инсталирате ръчно от страницата за
`изтегляне на Mercurial <http://mercurial.selenic.com/wiki/Download>`_.

Mercurial версия 1.7.x изисква конфигурация на Certification Authorities (CAs). Грешка от вида:

.. code-block:: console

    warning: code.google.com certificate with fingerprint b1:af: ... bc not verified (check hostfingerprints or web.cacerts config setting)

когато използвате Mercurial означава, че CA липсват. Проверете версията на Mercurial (``hg --version``) и 
`конфигурирайте CA <http://mercurial.selenic.com/wiki/CACertificates#Configuration_of_HTTPS_certificate_authorities>`_ при необходимост.

Изтегляне на хранилището
========================

Go ще се инсталира в директория наречена :file:`go`. Сменете настоящата директория с тази, в която искате да да е 
родителска за ``go`` и се уверете, че такава директория на съществува. След това изтеглете хранилището:

.. code-block:: console

    $ hg clone -u release https://code.google.com/p/go

Инсталиране на Go
=================

За да построите Go дистрибуцията изпълнете:

.. code-block:: console

    $ cd go/src
    $ ./all.bash

.. note:: За да построите под Windows използвайте ``all.bat``

Ако всичко мине добре, ще завърши с изход подобен на този:

.. code-block:: console

    ALL TESTS PASSED

    ---
    Installed Go for linux/amd64 in /home/you/go.
    Installed commands in /home/you/go/bin.
    *** You need to add /home/you/go/bin to your $PATH. ***
    The compiler is 6g.

където последните редове на този изход зависят от операционната система, архитектурата и главната директория, която 
сте използвали при инсталацията.

Тестване на инсталацията
========================

Проверете дали Go е правилно инталиран, като построите простра програма, както следва.

Създайте файл :file:`hello.go` и поставете в него следната програмата:

.. code-block:: go

    package main

    import "fmt"

    func main() {
        fmt.Printf("Здравей, свят!\n")
    }

След това изпълнете с ``go`` инструмента:

.. code-block:: console

    $ go run hello.go
    Здравей, свят!

Ако видите съобщението "Здравей, свят!", означава, че Go инсталацията работи.

В крак с версиите
=================

Go проекта поддържа два стабилни етикета в своето Mercurial хранилище: ``release`` и ``weekly``. Етикетът
``weekly`` се обновява почти всяка седмица, и би трявбало да бъде използван от потребители, които искат да 
следят разработката на проекта. Етикетът ``release`` се дава по-рядко, на онези ``weekly`` версии, които са се
доказали като стабилни.

Повечето Go потребители биха искали да оставят своята инсталация на етикета ``release``. Нови версии се обявяват
в пощенския списък `golang-announce <http://groups.google.com/group/golang-announce>`_

За да обновите настоящото дърво до последната версия, можете да изпълните:

.. code-block:: console

    $ cd go/src
    $ hg pull
    $ hg update release
    $ ./all.bash

За да използвате етикета ``weekly`` изпълнете заместете ``hg update weekly``.

Опционални променливи в средата
===============================

Компилационната среда на Go може да бъде модифицирана чрез променливи в средата. *Такива не се изискват при 
построяването*, но може би ще искате да сложите такива за да презапишете стандартните.

``$GOROOT``
    Главната директория на Go дървото, обикновено е ``$HOME/go``. Това е по подрабзиране родителската директория
    от която се извиква ``all.bash``. Ако изберете да не поставяте ``$GOROOT``, трябва да изпълнявате ``gomake``
    вместо ``make`` или ``gmake``, когато разработвате Go програми, използвайки стандартни make-файлове.

``$GOROOT_FINAL``
    Стойността се предполага от инсталираните изпълними файлове и скриптове, когато ``$GOROOT`` не е зададена.
    По подразиране приема стойността на ``$GOROOT``. Ако искате да построите Go дървото на едно място, но го 
    преместите на друго след построяването, задайте ``$GOROOT_FINAL`` да сочи към евентуалното място.

``$GOOS`` и ``$GOARCH``
    Името на целевата операционна система и компилацонната архитектура. Тези са по подразбиране взети съответно от
    ``$GOHOSTS`` и ``GOHOSTARCH`` (описано по-долу)

    Възможности за ``$GOOS`` са ``darwin`` (Mac OS X 10.5 и по-нов), ``freebsd``, ``linux``, ``netbsd``,
    ``openbsd``, ``plan9`` и ``windows``. Избори за ``$GOARCH`` могат да бъдат ``amd64`` (64-bit x86, най-зрялата
    част), ``386`` (32-bit x86) и ``arm`` (32-bit arm).

``$GOHOSTS`` и ``$GOHOSTARCH``
    Името на основната операционна система и компилацията на архитектурата. По подразбиране отговарят на локалните
    операционна система и архитектура.

    Валидни избори са същите като ``$GOOS`` и ``$GOARCH`` описани по-горе. Посочените стойности трябва да отговарят
    на локалната система. На пример не трябва да задавате  ``$GOHOSTARCH`` като ``arm``, ако системата е ``x86``.

``$GOBIN``
    Мястото където изпълнимите ще бъдат инсталирани. По подразбиране е ``$GOROOT/bin``. След инсталация бихте искали
    да зададете тази директория в ``$PATH``, за да използвате тези инструменти.

``$GOARM`` (arm, default=6)
    Версията на ARM архитектурата, която библиотеките трябва да целят по време на изпълнение. Задавайки сойност
    5 на ``$GOARM`` кара линкера да използва обаждания към софтуерна имплементация за плаваща запетая вместо
    хардуерна имплементация.

.. note:: ``$GOARCH`` и ``$GOOS`` определят целевата среда, не средата, която използвате. Като ефект вие винаги
    компилирате за повече платформи. Под архитектура имамте предвид видът изпълними, които целевата среда може
    да изпълнява: x86-64 система работеща с 32-bit-само операционна система трябва да зададе ``$GOARCH`` със 
    стойност ``386``, не ``amd64``.

Ако изберете да презапишете стойностите по подразбиране, задайте тези променливи във профила на вашия шел
(``$HOME/.bashrc``, ``$HOME/.profile`` или еквивалент) тези настройки могат да изглеждат така:

.. code-block:: console

    export GOROOT=$HOME/go
    export GOARCH=amd64
    export GOOS=linux

    
